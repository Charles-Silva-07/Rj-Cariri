pipenv install django = cria um ambiente virtual e instala o django

django-admin startproject rjcariri . = o ponto no fim faz com que seja criado o projeto na pasta raiz

python manage.py runserver = roda o servidor django

crtl + c =  para o servidor django

criaramos o arquivo Procfile = para onformar ao heroku como vai rodar nossa ap

pipenv install gunicorn = servidor de aplicativo do python que vai fazer a gestão das conexões pra gente

heroku apps:create 'nome_da_app desejada sem as aspas' = cria uma app para se conectar com o heroku

git remote -v = para ver a criação do repositorio heroku

criamos uma branch para enviar para o git e fazer o deploy SO COMITAMOS MESMO para enviar foi via terminal

git push heroku 7:master -f = o menos f e para força, ai o heroku recebe nossa aplicação atraves de um push
do git  OBS: VAI DA ERRO mais e corrigido abaixo

heroku config:set DISABLE_COLLECTSTATIC=1  = DESABILITAMOS O DISABLE_COLLECTSTATIC

DEPOIS fizemos o envio nomavente

heroku open = para abrir

HABILITAMOS O DEPLOY AUTOMATICO NO HEROKU VIA GIT ESPERANDO O C.I

OLA DJANGO

1 - entramos na pasta do projeto cd rjcariri
2 - python manage.py startapp base = criamos a app base que servira para todas as outras app
3 - @python "%VIRTUAL_ENV%\..\manage.py" %*
4 - configuramos a viwes a urls o setings e o app
5 - pipenv install 'pytest-django'
agora na raiz do projeto criamos o arquivo pytest.ini

6 - pipenv install 'pytest-cov' codecov = para nosso projeto com cobertura de teste
7 - pipenv run pytest --cov=rjcariri = para rodar o teste
8 - pipenv install 'python-decouple'
depois que configuramos o python decouple para não mostrar o erro com informativo django na web
9 - heroku config:set DEBUG=False

 from django.core.management.utils import get_random_secret_key
 get_random_secret_key()
 heroku config:set SECRET_KEY=

10 - pipenv install dj-database-url
     configuração para o banco de dados
     Essa biblioteca consegue gerar o ENGINE e o NAME baseado na url do banco de dados
Ele tem uma função parse que consegue gerar o valor do  ENGINE baseado no url

Nesse caso abaixo utilizamos a biblioteca partial do próprio python para definir que o parâmetro com max age sera de 600

11 - Testando Postgresql
12 - pipenv install psycopg2-binary
13 - mng collectstatic
14 -

Comando para coletar arquivos estáticos:
pipenv run python manage.py collectstatic --no-input

Instalando lib para upload de arquivos estáticos:
pipenv install django_s3_folder_storage

pipenv install collectfast

Comandos para setar variáveis do AWS no Keroku:

heroku config:set AWS_ACCESS_KEY_ID=
heroku config:set AWS_SECRET_ACCESS_KEY=
heroku config:set AWS_STORAGE_BUCKET_NAME=

Comando para reabilitar collectstatic no Heroku:

heroku config:unset DISABLE_COLLECTSTATIC

15 - heroku run python manage.py createsuperuser

    CONFIGURANDO BACKUP NO HEROKU
16 - heroku pg:backups:schedule DATABASE_URL --at '02:00 America/Sao_Paulo'
17 - heroku pg:backups:schedules
18 - heroku pg:backups:download
19 - heroku pg:backups
     ASSIM PROTEJEMOS NOSSO DADOS CASO VENHA ACONTERCER ALGUMA COISA COM NOSSO BANCO

http://127.0.0.1:8000/accounts/signup/

http://127.0.0.1:8000/accounts/login/

http://127.0.0.1:8000/accounts/logout/
https://www.fabioruicci.com.br/artigos/tutorial-django-cadastro-e-login-de-usuarios-apenas-com-e-mail-e-senha/





py -3 -m venv .venv
.venv\Scripts\activate  = ativar virtual env
.venv\Scripts\deactivate = desativar o virtual env
python.exe -m pip install --upgrade pip =  atualiza o pip

pip freeze > requirements.txt = criar arquivo requirements
pip freeze > requirements-dev.txt = para desenvolvedores

pip install -r requirements.txt = quando fazemos um clone que tem esse arquivo com as lib do projeto

@python "%VIRTUAL_ENV%\..\manage.py" %*  mng.bat

python -m venv venv = criar um ambiente virtual

cd venv\Scripts dentro da pasta scripts um activate
cd.. cd.. duas vezes para voltar a raiz
pip install django = instalando o django

django-admin startproject project . = criar um projeto inicial django
python manage.py startapp nome_da_app

instal o wampserver
testar wanpserver localhost/phpmyadmin/

configuramos o settings e colocamos o InnoDb = banco de dados relacional que da para trabalhar
com produtos pedidos etc..

depois baixar o pacote de extensão do mysql
 pip install mysqlclient

rodar o migrate para migrar para o banco de dados

python manage.py migrate

criar uma rota para testa nosso sitema
em urls

criamos uma pasta templates e dentro dela criamos dois arquivos html um main.html e outro home.html
no main.html vai refletir para as outras pagina
 no body incluimos
 {% block content %}
 {% endblock %}
 e tambe a cnd do bootstrap

no settings linkamos para o css

sempre que formos trabalhar com form em django temos que colocar o {% csrf_token %} no fomr

pip install Collectfast
python manage.py collectstatic
heroku config:set DISABLE_COLLECTSTATIC=1   = Desabilita a coleta
heroku config:unset DISABLE_COLLECTSTATIC = habilita novamente a coleta de arquivos estaticos
heroku run pip list

heroku git:remote -a rj-cariri
git add . = para adicionar todos os arquivos
heroku run python manage.py migrate
git commit -m "correção"
git push heroku master
git push heroku 27:master -f
heroku run python manage.py showmigrations = ver se as migrações subiu para o heroku



GERAR CHAVE SECRETA PARA O SECRET_KEY DO SETTINGS
python
from django.core.management.utils import get_random_secret_key
get_random_secret_key()
heroku config:set SECRET_KEY=
heroku --log




{% extends 'base/main.html' %}

{% load static %}

{% block content %}
<title>{% block title %}cariri Login{% endblock title %}</title>
<body>

<div class="area">

    <img class="logo" src="{% static 'images/LogoM.png' %}"/>
    <h2>Faça Login</h2>

    <form name="fomrPainel" id="formPainel" method="post" action="/painel/">
        <div>
            {% csrf_token %}
            <input type="email" name="email" placeholder="Digite seu e-mail" class="form-control">

            <input type="password" name="password" placeholder="Digite sua senha" class="form-control">

            <label class="remember">
                <input type="checkbox" name="remember" value="1"/>
                Lembrar Senha
            </label>
            <br>
            <input type="submit" value="Entrar" class="btn- btn-lg btn-block btn-primary ">

        </div>
        <br>
        <p><a href="{% url 'password_reset' %}">Lost password?</a></p>

    </form>


    <p class="gray padding"> 2022 </p>
</div>
</body>
{% endblock %}













<!--{% extends "base/main.html" %}-->

<!--{% block content %}-->

<!--{% if form.errors %}-->
<!--<p>Your username and password didn't match. Please try again.</p>-->
<!--{% endif %}-->

{% if next %}
{% if user.is_authenticated %}
<p>Your account doesn't have access to this page. To proceed,
    please login with an account that has access.</p>
{% else %}
<p>Please login to see this page.</p>
{% endif %}
{% endif %}


<form method="post" action="{% url 'login' %}">
    {% csrf_token %}
  <table>
       <tr>
        <td>{{ form.username.label_tag }}</td>
          <td>{{ form.username }}</td>
      </tr>
       <tr>
           <td>{{ form.password.label_tag }}</td>
           <td>{{ form.password }}</td>
       </tr>
   </table>
   <input type="submit" value="Entrar">
   <input type="hidden" name="next" value="{{ next }}">

</form>
<a href="{% url 'password_reset' %}">Esqueceu sua Senha</a>

{% endblock %}

o


       <div>
            <input type="email" name="email" placeholder="Digite seu e-mail" class="form-control">

            <input type="password" name="password" placeholder="Digite sua senha" class="form-control">

            <label class="remember">
                <input type="checkbox" name="remember" value="1"/>
                Lembrar Senha
            </label>
            <br>
            <input type="submit" value="Entrar" class="btn- btn-lg btn-block btn-primary ">
            <input type="submit" value="Entrar">
        </div>
        <br>
