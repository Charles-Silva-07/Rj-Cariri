pipenv install django = cria um ambiente virtual e instala o django

django-admin startproject rjcariri . = o ponto no fim faz com que seja criado o projeto na pasta raiz

python manage.py runserver = roda o servidor django

crtl + c =  para o servidor django

criaramos o arquivo Procfile = para onformar ao heroku como vai rodar nossa ap

pipenv install gunicorn = servidor de aplicativo do python que vai fazer a gestão das conexões pra gente

heroku apps:create 'nome_da_app desejada sem as aspas' = cria uma app para se conectar com o heroku

git remote -v = para ver a criação do repositorio heroku

criamos uma branch para enviar para o git e fazer o deploy SO COMITAMOS MESMO para enviar foi via terminal

git push heroku 7:master -f = o menos f e para força, ai o heroku recebe nossa aplicação atraves de um push
do git  OBS: VAI DA ERRO mais e corrigido abaixo

heroku config:set DISABLE_COLLECTSTATIC=1  = DESABILITAMOS O DISABLE_COLLECTSTATIC

DEPOIS fizemos o envio nomavente

heroku open = para abrir

HABILITAMOS O DEPLOY AUTOMATICO NO HEROKU VIA GIT ESPERANDO O C.I

OLA DJANGO

1 - entramos na pasta do projeto cd rjcariri
2 - python manage.py startapp base = criamos a app base que servira para todas as outras app
3 - @python "%VIRTUAL_ENV%\..\manage.py" %*
4 - configuramos a viwes a urls o setings e o app
5 - pipenv install 'pytest-django'
agora na raiz do projeto criamos o arquivo pytest.ini

6 - pipenv install 'pytest-cov' codecov = para nosso projeto com cobertura de teste
7 - pipenv run pytest --cov=rjcariri = para rodar o teste
8 - pipenv install 'python-decouple'
depois que configuramos o python decouple para não mostrar o erro com informativo django na web
9 - heroku config:set DEBUG=False

 from django.core.management.utils import get_random_secret_key
 get_random_secret_key()
 heroku config:set SECRET_KEY=

10 - pipenv install dj-database-url
     configuração para o banco de dados
     Essa biblioteca consegue gerar o ENGINE e o NAME baseado na url do banco de dados
Ele tem uma função parse que consegue gerar o valor do  ENGINE baseado no url

Nesse caso abaixo utilizamos a biblioteca partial do próprio python para definir que o parâmetro com max age sera de 600

11 - Testando Postgresql
12 - pipenv install psycopg2-binary
13 - mng collectstatic
14 -

Comando para coletar arquivos estáticos:
pipenv run python manage.py collectstatic --no-input

Instalando lib para upload de arquivos estáticos:
pipenv install django_s3_folder_storage

pipenv install collectfast

Comandos para setar variáveis do AWS no Keroku:

heroku config:set AWS_ACCESS_KEY_ID=
heroku config:set AWS_SECRET_ACCESS_KEY=
heroku config:set AWS_STORAGE_BUCKET_NAME=

Comando para reabilitar collectstatic no Heroku:

heroku config:unset DISABLE_COLLECTSTATIC

15 - heroku run python manage.py createsuperuser

    CONFIGURANDO BACKUP NO HEROKU
16 - heroku pg:backups:schedule DATABASE_URL --at '02:00 America/Sao_Paulo'
17 - heroku pg:backups:schedules
18 - heroku pg:backups:download
19 - heroku pg:backups

